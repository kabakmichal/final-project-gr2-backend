{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Questify - OpenAPI 3.0"
  },
  "servers": [
    {
      "url": "https://polite-churros-7ddf81.netlify.app/"
    }
  ],
  "paths": {
    "/api/todos/register": {
      "post": {
        "tags": ["User Routes"],
        "summary": "Register an user",
        "description": "Register an user",
        "operationId": "registerUser",
        "requestBody": {
          "description": "register an user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "validation data error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserValidationError"
                }
              }
            }
          },
          "409": {
            "description": "email or username is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "sendGrid error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendGridErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "put": {
        "tags": ["User Routes"],
        "summary": "User Login",
        "description": "User Login",
        "operationId": "userLogin",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSuccessLogin"
                }
              }
            }
          },
          "401": {
            "description": "validation data error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/logout": {
      "put": {
        "tags": ["User Routes"],
        "summary": "User Logout",
        "description": "User Logout.",
        "operationId": "userLogout",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Some token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogout"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/todos": {
      "get": {
        "tags": ["todos"],
        "summary": "get all Todos",
        "description": "get all Todos",
        "operationId": "getAllTodos",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Some token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAllTodoList"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["todos"],
        "summary": "Add new Todo",
        "description": "Add new Todo",
        "operationId": "addNewTodo",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Some token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "add new todo",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewTodoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/todos/{todoId}": {
      "delete": {
        "tags": ["todos"],
        "summary": "Deletes todo",
        "description": "delete todo",
        "operationId": "deleteTodo",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Some token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "todoId",
            "in": "path",
            "description": "todo id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoDeleted"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Todo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoNotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["todos"],
        "summary": "update Todo",
        "description": "update Todo",
        "operationId": "updateTodo",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Some token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "todoId",
            "in": "path",
            "description": "todo id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoUpdated"
                }
              }
            }
          },
          "400": {
            "description": "Todo Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Todo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoNotFound"
                }
              }
            }
          }
        }
      }
    },
    "/api/todos/{todoId}/finished": {
      "put": {
        "tags": ["todos"],
        "summary": "set todo status finished",
        "description": "set todo status finished",
        "operationId": "setTodoStatusFinished",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Some token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "todoId",
            "in": "path",
            "description": "todo id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoSetStatusDone"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Todo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoNotFound"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "UserRegistrationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "some validation error"
          }
        }
      },
      "UserLogout": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User logged out"
          }
        }
      },
      "TodoDeleted": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Todo deleted"
          }
        }
      },
      "TodoSetStatusDone": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Todo status updated to 'done' "
          }
        }
      },
      "TodoNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Todo not found"
          }
        }
      },
      "AuthorizationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not Authorized"
          }
        }
      },
      "UserAllTodoList": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "example@example.com"
              },
              "username": {
                "type": "string",
                "example": "some username"
              },
              "verify": {
                "type": "boolean",
                "example": false
              },
              "todoListIds": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "some title"
                    },
                    "date": {
                      "type": "string",
                      "example": "21.01.2015"
                    },
                    "time": {
                      "type": "string",
                      "example": "13:00:00"
                    },
                    "category": {
                      "type": "string",
                      "example": "some category"
                    },
                    "difficulty": {
                      "type": "string",
                      "example": "easy"
                    },
                    "status": {
                      "type": "string",
                      "example": "undone"
                    },
                    "type": {
                      "type": "string",
                      "example": "quest"
                    }
                  }
                }
              }
            }
          },
          "token": {
            "type": "string",
            "example": "some token"
          }
        }
      },
      "UserRegistrationErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "email or username is already registered"
          }
        }
      },
      "UserValidationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email/username or password is wrong"
          }
        }
      },
      "UserSuccessLogin": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "example@example.com"
              },
              "username": {
                "type": "string",
                "example": "some username"
              },
              "verify": {
                "type": "boolean",
                "example": false
              },
              "todoListIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "token": {
            "type": "string",
            "example": "some token"
          }
        }
      },
      "UserLoginDataError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "some validation error"
          }
        }
      },
      "SendGridErrorResponse": {
        "type": "object",
        "properties": {
          "serverMessage": {
            "type": "string",
            "example": "validation message failed"
          },
          "responseMsg": {
            "type": "string",
            "example": "Sendgrid error"
          }
        }
      },
      "TodoElement": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "some title"
          },
          "date": {
            "type": "string",
            "example": "21.01.2015"
          },
          "time": {
            "type": "string",
            "example": "13:00:00"
          },
          "category": {
            "type": "string",
            "example": "some category"
          },
          "difficulty": {
            "type": "string",
            "example": "easy"
          },
          "status": {
            "type": "string",
            "example": "undone"
          },
          "type": {
            "type": "string",
            "example": "quest"
          }
        }
      },
      "TodoUpdated": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Todo updated"
          }
        }
      },
      "AddNewTodoResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "some validation error"
          },
          "todo": {
            "$ref": "#/components/schemas/TodoElement"
          }
        }
      }
    }
  }
}
